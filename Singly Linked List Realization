//
//  main.cpp
//  DDS: Dynamic Data Structure
//  Linked Lists
//  Singly Linked List Realization

//
//  Created by Mosolov Mikhail on 10/11/2021.
//  Copyright Â© 2021 Mosolov Mikhail. All rights reserved.
//

#include <iostream>

using namespace std;


template<typename T>
class List{
public:
    List();
    ~List();
    
    void pushBack(T data);
    void pushFront(T data);
    void insert(T value, int index);
    int GetSize() { return Size; }
    void popFront();
    void clear();
    void popBack();
    void removeAt(int Index);
    T& operator[](const int index);
    
private:
    template<typename V>
    class Node{
    public:
        Node *pNext;
        T data;
        Node(T data = V(), Node *pNext = nullptr)
        {
            this->data = data;
            this->pNext = pNext;
        }
    };
    
    int Size;
    Node<T> *head;
};

template<typename T>
List<T>::List()
{
    Size = 0;
    head = nullptr;
}

template<typename T>
List<T>::~List()
{
    clear();
}

template<typename T>
void List<T>::pushBack(T data)
{
    if (head == nullptr)
    {
        head = new Node<T>(data);
    }
    else
    {
        Node<T> *current = this->head;
        while(current->pNext != nullptr)
        {
            current = current->pNext; //?
        }
        current->pNext = new Node<T>(data);
    }
    Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
    int counter = 0;
    Node<T> *current = this->head;
    while (current!=nullptr)
    {
        if (counter == index)
        {
            return current->data;
        }
        current = current->pNext;
        counter++;
    }
    return current->data;
}

template<typename T>
void List<T>::popFront()
{
    Node<T> *temp = head;
    head = head->pNext;
    delete temp;
    Size--;
    
}

template<typename T>
void List<T>::clear()
{
    while (Size)
    {
        popFront();
    }
}

template<typename T>
void List<T>::pushFront(T data)
{
    head = new Node<T>(data, head);
    Size++;
}

template<typename T>
void List<T>::insert(T value, int index)
{
    if (index==0)
    {
        pushFront(value);
    }
    else
    {
        Node<T> *previous = this->head;
    
        for (int i = 0; i < index - 1; i++)
        {
            previous = previous->pNext;
        }
        
        //Node<T> *newNode = new Node<T>(value, previous->pNext);
        
        //previous->pNext = newNode;
        
        previous->pNext = new Node<T>(value, previous->pNext);
        
        Size++;
    }
}

template <typename T>
void List<T>::removeAt(int index)
{
    if (index == 0)
    {
        popFront();
    }
    else
    {
        Node<T> *previous = this->head;
        for (int i = 0; i < index - 1; i++)
        {
            previous = previous->pNext;
        }
        
        Node<T> *toDelete = previous->pNext;
        
        previous->pNext = toDelete->pNext;
        
        delete toDelete;
        
        Size--;
    }
}

template<typename T>
void List<T>::popBack()
{
    removeAt(Size-1);
}

int main() {
    // insert code here...
    
    List<int> lst;
    lst.pushFront(12);
    lst.pushFront(121);
    lst.pushFront(1221);
    
    
    for (int i=0; i < lst.GetSize(); i++) {
        cout << lst[i] << endl;
    }
    
    cout << endl << "popBack " << endl;
    
    lst.popBack();
    
    for (int i = 0; i < lst.GetSize(); i++)
    {
        cout << lst[i] << endl;
    }
    
    return 0;
}

